precision mediump float;

uniform float dT;
uniform vec2 viewport;
uniform sampler2D velocities;
uniform sampler2D positions;
uniform vec4 attractors[3];
uniform mat4 modelMatrix;

const float particleMass = 1.0;
const float cons = 0.01;

vec3 calcForce (float cons,  float mass1, float mass2, vec3 pos1, vec3 pos2) {
  float dist = max(distance(pos1, pos2), .1);
  vec3 dir   = (pos1 - pos2) / dist;

  return cons * mass1 * mass2 / (dist * dist) * dir;
}

void main () {
  vec2 textureIndex = gl_FragCoord.xy / viewport;
  vec3 velocity     = texture2D(velocities, textureIndex).xyz;
  vec3 position     = (modelMatrix * texture2D(positions, textureIndex)).xyz;
  vec3 force        = vec3(0.0, 0.0, 0.0);

  for (int i = 0; i < 3; i++) {
    force = force + calcForce(cons, attractors[i].w, particleMass, 
                              attractors[i].xyz, position);
  }

  gl_FragColor = vec4((force / particleMass) * dT + velocity, 1.0);
}
