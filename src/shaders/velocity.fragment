precision highp float;

const float PARTICLE_MASS       = 1.0;
const float ATTRACTION_CONSTANT = 0.01;

uniform float dT;
uniform vec2 viewport;
uniform sampler2D velocities;
uniform sampler2D positions;
uniform sampler2D props;
uniform mat4 modelMatrix;

struct Attractor {
  vec3 position;
  float mass;
};

uniform Attractor attractors[3];

vec3 calcForce (float cons,  float mass1, float mass2, vec3 pos1, vec3 pos2) {
  float dist = max(distance(pos1, pos2), mass1 / 1000.0);
  vec3 dir   = (pos1 - pos2) / dist;

  return cons * mass1 * mass2 / (dist * dist) * dir;
}

void main () {
  vec2 textureIndex = gl_FragCoord.xy / viewport;
  vec3 velocity     = texture2D(velocities, textureIndex).xyz;
  vec3 position     = (modelMatrix * texture2D(positions, textureIndex)).xyz;
  vec3 force        = vec3(0.0, 0.0, 0.0);
  float timeAlive   = texture2D(props, textureIndex).x;

  if (timeAlive == 0.0) {
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
  } else {
    for (int i = 0; i < 3; i++) {
      force += calcForce(ATTRACTION_CONSTANT, 
                         attractors[i].mass, 
                         PARTICLE_MASS, 
                         attractors[i].position,
                         position);
    }
    gl_FragColor = vec4((force / PARTICLE_MASS) * dT + velocity, 1.0);
  }
}
